#!/usr/bin/env php
<?php
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Google\Cloud\Debugger;

$foundAutoloader = false;
$autoloaderCandidates = [
    '/../vendor/autoload.php',     // Git clone of google-cloud-php-debugger
    '/../../vendor/autoload.php',  // Git clone of google-cloud-php
    '/../../../autoload.php',      // google/cloud-debugger installation
    '/../../../../autoload.php',   // google/cloud installation
];
foreach ($autoloaderCandidates as $candidate) {
    if (file_exists(__DIR__ . $candidate)) {
        require_once __DIR__ . $candidate;
        $foundAutoloader = true;
        break;
    }
}

if (!$foundAutoloader) {
    die('No autoloader found');
}

function showUsageAndDie()
{
    $filename = basename(__FILE__);
    fwrite(STDERR, <<<EOS
Usage:
  $filename [options] | <source-root>

Options:
  -c, --config=CONFIG_FILE       If specified, load this file which should initialize and return a Debugger\Daemon instance.
  -s, --source-root=SOURCE_ROOT  Sets the source root for the Daemon. Ignored if --config is specified.


EOS
);
    die();
}

if (count($argv) < 2) {
    showUsageAndDie();
}

$options = getopt('c:s:', ['config:', 'source-root:']) + [
    'c' => null,
    'config' => null,
    's' => null,
    'source-root' => null
];
try {
    $cli = new CliDaemon([
        'config' => $options['c'] ?: $options['config'],
        'sourceRoot' => $options['s'] ?: $options['source-root'] ?: $argv[1]
    ]);
} catch (\Exception $e) {
    fwrite(STDERR, $e->getMessage() . PHP_EOL);
    showUsageAndDie();
}
$cli->run();
